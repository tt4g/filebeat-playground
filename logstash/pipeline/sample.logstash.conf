input {
    beats {
        host => "0.0.0.0"
        port => 5044
        include_codec_tag => true
    }
}

filter {
    if "sample" in [tags] {
        grok {
            id => "sample_grok_filter"
            enable_metric => true
            match => {
                "message" => "%{NOTSPACE:sample_message_suffix}%{SPACE}%{GREEDYDATA}"
            }
            break_on_match => true
            overwrite => []
            keep_empty_captures => false
            named_captures_only => true
            pattern_definitions => {}
            patterns_dir => []
            patterns_files_glob => "*"
            tag_on_failure => ["_grokparsefailure"]
            tag_on_timeout => "_groktimeout"
            timeout_millis => 30000
        }
        # Using date filter if need to change @timestamp field.
        # e.g. using log datetime.
#         date {
#             id => "sample_date_filter"
#             enable_metric => true
#             match => ["custom_date_field", "ISO8601"]
#             target => "@timestamp"
#             locale => "C"
#             tag_on_failure => ["_dateparsefailure"]
#         }
    }
}

output {
    if "sample" in [tags] {
        elasticsearch {
            hosts => "${ELASTICSEARCH_HOSTS}"
            # [@metadata] [beat] is output.logstash.index in filebeat.yml
            index => "%{[@metadata][beat]}-%{[@metadata][version]}-sample-%{+YYYY.MM.dd}"
            document_type => "%{[@metadata][type]}"
        }
        file {
            id => "sample.logstash.file"
            path => "/var/log/logstash/sample_logstash_file/sample-%{+YYYY-MM-dd}.txt"
            codec => line { format => "[message] %{message} [suffix] %{sample_message_suffix}" }
            enable_metric => true
            create_if_deleted => true
            dir_mode => 0755
            file_mode => 0755
            filename_failure => "_filepath_failures"
            flush_interval => 1
            write_behavior => "append"
        }
    }
}
